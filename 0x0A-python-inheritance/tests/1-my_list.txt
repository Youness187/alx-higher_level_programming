# 1-my_list.txt
=======================
How to Use 1-my_list.py
=======================

This module defines a class ``MyList`` that inherits from ``list``.

Usage
=============
``MyList`` is an inherited ``list`` class, and thus features the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.

Importing the function from the module:

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

Or a single argument, which must be an iterable object:

    >>> print(my_list)
    []

Checking that appendng works:

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

Checking for too many arguments:

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
        ...
    TypeError: list expected at most 1 argument, got 2


Checking for reversed order list:

    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(1)
    >>> print(my_list)
    [3, 2, 1]


Replaced with indexing:

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

And removed with the remove method:

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

Checking for too many arguments:

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
        ...
    TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

Checking for reversed order list:
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

